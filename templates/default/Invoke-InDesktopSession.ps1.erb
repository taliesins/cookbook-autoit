$ErrorActionPreference = "Stop"    
Function Stop-ComputerSession {
    Param(
        [Parameter(Mandatory = $False, Position = 0, ValueFromPipeline = $True)]
        [string[]]$Computer,
        [Parameter(Mandatory = $False, Position = 1, ValueFromPipeline = $True)]
        [string]$SessionId      
    )    

    if ($Computer){
    }else{
        $Computer = 'localhost'
    }

    $exitCode = $global:LASTEXITCODE

    ForEach($c in $Computer) {
        $result = &reset session $SessionId /server:$c
    }

    $global:LASTEXITCODE = $exitCode
}

Function Get-ComputerSessions {
[cmdletbinding(
    DefaultParameterSetName = 'session',
    ConfirmImpact = 'low'
)]
    Param(
        [Parameter(
            Mandatory = $False,
            Position = 0,
            ValueFromPipeline = $True)]
            [string[]]$Computer
            )
Begin {
    $report = @()
    }
Process {
    if ($Computer){
    }else{
        $Computer = @('localhost')
    }

    $exitCode = $global:LASTEXITCODE

    ForEach($c in $Computer) {
        # Parse 'query session' and store in $sessions:
        $sessions = &query session /server:$c
        1..($sessions.count -1) | % {
            $temp = "" | Select Computer,SessionName, Username, Id, State, Type, Device
            $temp.Computer = $c
            $temp.SessionName = $sessions[$_].Substring(1,18).Trim()
            $temp.Username = $sessions[$_].Substring(19,20).Trim()
            $temp.Id = $sessions[$_].Substring(39,9).Trim()
            $temp.State = $sessions[$_].Substring(48,8).Trim()
            $temp.Type = $sessions[$_].Substring(56,12).Trim()
            $temp.Device = $sessions[$_].Substring(68).Trim()
            $report += $temp
        }
    }

    $global:LASTEXITCODE = $exitCode
}
End {
    $report
    }
}

function Invoke-Process
{
    [OutputType([PSCustomObject])]
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $false, Position = 0)]
        [string]$FileName = "PowerShell.exe",

        [Parameter(Mandatory = $false, Position = 1)]
        [string]$Arguments = "",
        
        [Parameter(Mandatory = $false, Position = 2)]
        [string]$WorkingDirectory = ".",

        [Parameter(Mandatory = $false, Position = 3)]
        [Nullable[TimeSpan]]$Timeout = [System.TimeSpan]::FromMinutes(2),

        [Parameter(Mandatory = $false, Position = 4)]
        [System.Diagnostics.ProcessPriorityClass]$Priority = [System.Diagnostics.ProcessPriorityClass]::Normal
	)

    end
    {
        try
        {
            # new Process
            $process = NewProcess -FileName $FileName -Arguments $Arguments -WorkingDirectory $WorkingDirectory
            
            # Event Handler for Output
            $stdSb = New-Object -TypeName System.Text.StringBuilder
            $errorSb = New-Object -TypeName System.Text.StringBuilder
            $scripBlock = 
            {
                $x = $Event.SourceEventArgs.Data
                if (-not [String]::IsNullOrEmpty($x))
                {
                    [System.Console]::WriteLine($x)
                    $Event.MessageData.AppendLine($x)
                }
            }
            $stdEvent = Register-ObjectEvent -InputObject $process -EventName OutputDataReceived -Action $scripBlock -MessageData $stdSb
            $errorEvent = Register-ObjectEvent -InputObject $process -EventName ErrorDataReceived -Action $scripBlock -MessageData $errorSb

            # execution
            $process.Start() > $null
            $process.PriorityClass = $Priority
            $process.BeginOutputReadLine()
            $process.BeginErrorReadLine()
            
            # wait for complete
            "Waiting for command complete. It will Timeout in {0} minutes" -f $Timeout.TotalMinutes | VerboseOutput
            $isTimeout = $false
            if (($Timeout -ne $null) -and (-not $Process.WaitForExit($Timeout.TotalMilliseconds)))
            {
                $isTimeout = $true
                "Timeout detected for {0}ms. Kill process immediately" -f $Timeout.TotalMilliseconds | VerboseOutput
                $Process.Kill()
            }
            $Process.WaitForExit()
            $Process.CancelOutputRead()
            $Process.CancelErrorRead()

            # verbose Event Result
            $stdEvent, $errorEvent | VerboseOutput

            # Unregister Event to recieve Asynchronous Event output (You should call before process.Dispose())
            Unregister-Event -SourceIdentifier $stdEvent.Name
            Unregister-Event -SourceIdentifier $errorEvent.Name

            # verbose Event Result
            $stdEvent, $errorEvent | VerboseOutput

            # Get Process result
            return GetCommandResult -Process $process -StandardStringBuilder $stdSb -ErrorStringBuilder $errorSb -IsTimeOut $isTimeout
        }
        finally
        {
            if ($null -ne $process){ $process.Dispose() }
            if ($null -ne $stdEvent){ $stdEvent.StopJob(); $stdEvent.Dispose() }
            if ($null -ne $errorEvent){ $errorEvent.StopJob(); $errorEvent.Dispose() }
        }
    }

    begin
    {
        function NewProcess
        {
            [OutputType([System.Diagnostics.Process])]
            [CmdletBinding()]
            param
            (
                [parameter(Mandatory = $true)]
                [string]$FileName,
                
                [parameter(Mandatory = $false)]
                [string]$Arguments,
                
                [parameter(Mandatory = $false)]
                [string]$WorkingDirectory
            )

            "Execute command : '{0} {1}', WorkingSpace '{2}'" -f $FileName, $Arguments, $WorkingDirectory | VerboseOutput
            # ProcessStartInfo
            $psi = New-object System.Diagnostics.ProcessStartInfo 
            $psi.CreateNoWindow = $true
            $psi.LoadUserProfile = $true
            $psi.UseShellExecute = $false
            $psi.RedirectStandardOutput = $true
            $psi.RedirectStandardError = $true
            $psi.FileName = $FileName
            $psi.Arguments+= $Arguments
            $psi.WorkingDirectory = $WorkingDirectory

            # Set Process
            $process = New-Object System.Diagnostics.Process 
            $process.StartInfo = $psi
            $process.EnableRaisingEvents = $true
            return $process
        }

        function GetCommandResult
        {
            [OutputType([PSCustomObject])]
            [CmdletBinding()]
            param
            (
                [parameter(Mandatory = $true)]
                [System.Diagnostics.Process]$Process,

                [parameter(Mandatory = $true)]
                [System.Text.StringBuilder]$StandardStringBuilder,

                [parameter(Mandatory = $true)]
                [System.Text.StringBuilder]$ErrorStringBuilder,

                [parameter(Mandatory = $true)]
                [Bool]$IsTimeout
            )
            
            'Get command result string.' | VerboseOutput
            return [PSCustomObject]@{
                StandardOutput = $StandardStringBuilder.ToString().Trim()
                ErrorOutput = $ErrorStringBuilder.ToString().Trim()
                ExitCode = $Process.ExitCode
                IsTimeOut = $IsTimeout
            }
        }

        filter VerboseOutput
        {
            $_ | Out-String -Stream | Write-Verbose
        }
    }
}

Function Invoke-InDesktopSession {
    Param(        
            [string]$username,
            [string]$password,
            [string]$workingDirectory = ".",
            [string]$command,
            [string]$psexecPath,
            [string]$rdpplusPath,
            [Nullable[double]]$timeOutMinutes = 20
            )
    
    $domain = ""
    if ($username -match "\\") {
        $domain = $username.split('\\')[0]
        $username = $username.split('\\')[1]
    }

    if ($username -match "@") {
        $domain = $username.split('@')[1]
        $username = $username.split('@')[0]
    }

    $computer = [System.Net.Dns]::GetHostByName($env:Computer).HostName
    $existingSessionForUser = Get-ComputerSessions -computer $computer | ?{$_.Username -eq $username}

    if ($existingSessionForUser) {
        Write-Verbose "Found existing session for the user - Session Id $($existingSessionForUser.Id)"
        $sessionIdForUser = $existingSessionForUser.Id
    } else {
        Write-Verbose "Couldn't find and existing session for the user. Creating a new one with RDPPlus"
        Write-Verbose "`"$rdpplusPath`" /v:$computer /u:$username /p:$password /o:`"authentication level:i:0`""
        &"$rdpplusPath" /v:$computer /u:$username /p:$password /o:"authentication level:i:0"
        $sessionIdForUser = $null
        while (!$sessionIdForUser) {
            sleep 1
            $sessionIdForUser = Get-ComputerSessions -computer $computer | ?{$_.Username -eq $username} | %{$_.Id} 
        }
        Write-Verbose "Session created. Id: $sessionIdForUser"
    }

	try{
		$fileName = $psexecPath
		$outputLogPath = "$workingDirectory\DesktopSession_out_$([System.Guid]::NewGuid().ToString()).txt"
		Write-Verbose "Command output will be captured, but also saved in $outputLogPath (if relative, then resolved against $workingDirectory )"
		$arguments = "-accepteula -i $sessionIdForUser -w `"$workingDirectory`" -u `"$username`" -p `"$password`" cmd /c `"$command 2>&1 > $outputLogPath`""
		$timeOut = $(if ($timeOutMinutes -ne $null) { ([System.TimeSpan]::FromMinutes($timeOutMinutes)) } else { $null })
	
		$result = Invoke-Process -WorkingDirectory $workingDirectory -FileName $fileName -Arguments $arguments -Timeout $timeOut
		$result.StandardOutput = "$($result.StandardOutput)`r`n$(Get-Content -Raw $outputLogPath)"
		return $result
	} finally{
		if ($existingSessionForUser) {
		} else {
			Stop-ComputerSession -Computer $computer -SessionId $sessionIdForUser
		}
	}
}
